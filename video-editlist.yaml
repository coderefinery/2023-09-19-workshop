- workshop_title: CodeRefinery 2023 Sep
- workshop_description: >
    This is part of the CodeRefinery September 2023 workshop.  The videos
    are available to everyone, but may be most useful to the people
    who attended the workshop and want to review later.

    Playlist: https://www.youtube.com/playlist?list=PLpLblYHCzJADyLxv8GRyxFiRJBhQ-G0NQ

    Workshop webpage: https://coderefinery.github.io/2023-09-19-workshop/

    CodeRefinery: https://coderefinery.org/

# This input will be used for all segments until redefined
- input: day1-obs.mkv


# Preview icebreaker
- output: day1-icebreaker.mkv
  title: 1.0 Icebreaker
  description: >-
    The pre-start discussion and icebreakers.  You probably want to go
    on to the next video.
  time:
    - start: 00:14:20
    - end: 00:19:32


# Intro
- output: day1-intro.mkv
  title: 1.1 Intro
  description: >
    The introduction to this workshop, explaining general mechanics
    and what CodeRefinery is.

    https://github.com/coderefinery/workshop-intro/blob/master/livestream.md
  time:
     #- input: CR_LOGO_30p.mkv
     #- start: 00:00
     #- stop: 00:06
     - input: day1-obs.mkv
     - start: 00:19:32
     - stop: 00:39:29
     #- input: CR_LOGO_30p.mkv
     #- start: 00:00
     #- stop: 00:06

# Git-intro day 1
- output: day1-git-intro-1.mkv
  title: 1.2 Git Intro
  description: >
    Here, we go over the basics of git from first principles, though
    this is not the most basic course you can find.  We cover basics,
    motivation, making commits, undoing things, staging.  The part 2
    video goes into branching and merging, conflict resolution,
    inspecting history, basics of sharing repositories online, and
    some practical advice.  However, this does not cover multi-user
    work or remotes (that is the next lesson, git-collaborative).

    There are two external videos which are excluded from this
    recording.  You can find the link to them in the table of contents
    below.

    https://coderefinery.github.io/git-intro/

  time:
    #- input: CR_LOGO_30p.mov
    #- start: 00:00
    #- stop: 00:06
    - input: day1-obs.mkv
    - start: 00:40:39
    - -: Overview of the day
    - 00:42:45: '# Motivation to version control'
    - 00:55:21: '# Basics (creating repo, adding, committing, etc.)'
    - 00:58:25: Initial configuration of git
    - stop: 01:13:20
    - start: 01:24:19
    - -: "Exercise: recording changes"
    - stop: 01:28:14
    - start: 01:47:34
    - -: Going over the exercise
    - 01:49:55: Git history and git log
    - 01:54:32: Writing good commit messages
    - 01:58:52: Ignoring files with .gitignore
    - 02:00:48: Summary of basics
    - 02:02:46: Optional and extra exercises
    - stop: 02:04:53
    - start: 03:18:46
    - -: "Q&A after the break"
    - 03:22:32: '# Branching and merging'
    - 03:28:24: '"git graph" alias'
    - 03:31:47: Creating and working with branches
    - 03:38:49: "Exercise: create and commit to branches"
    - stop: 03:41:20
    - start: 04:01:35
    - -: Quickly looking at the exercise
    - 04:03:19: Merging branches
    - 04:05:49: Deleting branches
    #- 02:51:36: Tags
    - 04:07:07: "Q&A"
    - stop: 04:15:30
    - start: 04:26:14
    - -: '# Conflict resolution'
    - 04:30:50: Preparing a sample conflict to resolve
    - 04:34:52: Merging conflicting changes
    - 04:36:28: Resolving the conflict
    - 04:44:02: 'Q&A'
    - stop: 04:51:20




# Day 2
- input: day2-obs.mkv


- output: day2-icebreaker.mkv
  title: 2.1 Day 2 icebreaker
  description: >
    The quick introduction to Day 2 and recap from Day 1.
  time:
    #- input: CR_LOGO_30p.mkv
    #- start: 00:00
    #- stop: 00:06
    - input: day2-obs.mkv
    - start: 00:13:44
    - 00:14:31: Icebreaker questions
    - 00:18:41: git tags
    - 00:20:43: Local vs remote
    - stop: 00:24:03
    #- input: CR_LOGO_30p.mkv
    #- start: 00:00
    #- stop: 00:06

# Git-intro day 2
- output: day2-git-intro-2.mkv
  title: 2.2 Git Intro day 2
  description: >
    Part 2 of the previous video: https://www.youtube.com/watch?v=e2GGBtlZW8o&list=PLpLblYHCzJADyLxv8GRyxFiRJBhQ-G0NQ&index=4

    Here, we go over the basics of git from first principles, though
    this is not the most basic course you can find.  Previous video:
    We covered basics, motivation, making commits, merging, and
    staging.  This part 2 video goes into conflict resolution, remotes
    and basics of
    sharing repositories online, inspecting history, undoing and
    recovering, and some practical advice.  However, this does not
    cover multi-user work or remotes (that is the next lesson,
    git-collaborative).

    https://coderefinery.github.io/git-intro/

  time:
    #- input: CR_LOGO_30p.mov
    #- start: 00:00
    #- stop: 00:06
    - input: day2-obs.mkv
    - start: 00:28:39
    - 00:30:11: § Sharing repositories online
    - 00:41:44: "Exercise: push recipe to Github. (around here)"
    - stop: 00:44:52
    - start: 01:08:05
    - -: Demo and Questions from exercise
    - stop: 01:15:53
    - start: 01:26:46
    - -: 'Q&A'
    - 01:30:28: § Inspecting history
    - 01:42:44: "Exercise: inspecting history"
    - stop: 01:46:20
    - start: 02:16:31
    - -: Wrap-up of inspecting history, summary, Q&A
    - stop: 02:24:03
    - start: 03:21:58
    - -: After break discussion
    - 03:23:20: § Undoing and recovering
    - 03:38:15: "Exercises: undoing and recovering"
    - stop: 03:39:07
    - start: 04:04:29
    - -: Going over the exercises
    #- 03:01:48: "Summary of the lessons not covered: staging, git under the hood, and configuration"
    - stop: 04:16:19
    - start: 04:26:59
    - -: "§ Practical advice: how much git is necessary?, and general Q&A of last two days"
    #- 03:42:54: Important preparation for tomorrow
    #- cover: {begin: "03:50:33", end: "03:51:51", w: 840, h: 1080}
    #- 03:52:00: Feedback and other comments, day 2
    - stop: 004:55:56
    #- input: CR_LOGO_30p.mov
    #- start: 00:00
    #- stop: 00:06

- output: day2-bisect.mkv
  title: 2.3 Bisection exercise
  description: >
    Demonstration of git-bisect from the "Inspecting history"
    exercise.  Discussion + demo of the exercise.  We didn't do this
    in the main exercise.

    https://coderefinery.github.io/git-intro/archaeology/#finding-out-when-something-broke-changed-with-git-bisect

  time:
    - input: day2-obs.mkv
    - start: 04:56:13
    - -: What is git bisect?
    - 04:57:30: CATS
    - 05:00:26: § Starting the exercise
    - 05:02:03: § Bisecting manually
    - 05:08:59: Finding the bad commit, discussion
    - 05:11:32: § Bisecting with a script, figuring out how to test automatically
    - 05:15:45: Making the script
    - 05:16:32: Running the script
    - 05:18:13: § Final discussion
    - stop: 05:19:41



## Day 3
- input: day3-obs.mkv

- output: day3-icebreaker.mkv
  title: 3.1 Day 3 icebreaker
  description: >
    The icebreaker of day 3.  We have a guest who prepares for us by
    discussing about their experience with the MNE project and how has
    collaboration with many people using the things we will learn
    about today.
  time:
    - start: 00:16:55
    - stop: 00:21:50



- output: day3-git-collab.mkv
  title: 3.2 Git collaborative
  description: >
      Today, we expand from using git by yourself to using it in a
      team.  We use Github, centralized workflows, forking on Github,
      pull requests, code review, commenting on pull requests,
      practical advice on using Git and version control in real projects,
      contributing to other projects, and more.

      https://coderefinery.org/git-collaborative/
  time:
    - start: 00:21:55
    - -: Some initial discussion
    - 00:30:14: Starting off, basic prerequisites
    - 00:39:28: § Concepts around collaboration
    - 00:58:01: § Centralized workflow
    - 01:05:54: stop
    - 01:16:11: start
    - -: "Exercise Centralized-1"
    - stop: 01:24:58
    - start: 01:54:37
    - -: "Exercise Centralized-2: reviewing and merging the pull request"
    - cover: {begin: 02:13:15, end: 02:13:24}  # some window on screen
    - stop: 02:22:07
    - start: 03:19:43
    - -: § Distributed version control and forking workflow
    - 03:28:47: Preparation for "Exercise Distributed-1"
    - stop: 03:37:02
    - start: 04:16:59
    - -: Merging, going over the exercise
    - 04:39:10: § How to contribute changes to someone else's project
    - 04:49:53: "More general Q&A"
    - 04:57:33: Final words
    - 04:58:11: Preparation for week 2
    - stop: 05:00:28


### Day 4
#- input: day4-obs.mkv
#
#- output: day4-intro.mkv
#  title: 4.0 Second week icebreaker/introduction
#  description: >
#    The introduction to the second week, where we go into slightly
#    more detail bout what we will cover this week and how it fits
#    together.  There is also a guest to give us an introduction of
#    reproducible research and social coding, which are the topics of
#    today.
#
#    In short, if last week was about tracking code, this week is about
#    managing software.
#  time:
#    - start: 00:12:51
#    - -: Guest talking about reproducibility and science
#    - 00:27:35: Introduction to week 2
#    - end: 00:35:59
#
#
#- output: day4-reproducible-research.mkv
#  title: 4.1 Reproducible Research
#  description: >
#    If you can't get your code to do the same thing again, is it
#    really science?  Or more practically, are you able to do your
#    work?  Reproducibilty is a big deal, but we don't always learn how
#    to do it.  In this lesson, we cover the basics, how to organize
#    projects, record computational steps with Snakemake or other
#    workflow managers, how to record environments with conda (and docker
#    a bit), and sharing code and data (FAIR).
#
#    https://coderefinery.github.io/reproducible-research/
#
#  time:
#    - start: 00:35:59
#    - 00:36:19: Motivation
#    - 00:46:37: Organizing projects
#    - 00:57:47: Recording dependencies
#    - 01:04:54: "Exercise: explore dependency management in conda/Python/R/Matlab"
#    - stop: 01:08:48
#    - start: 01:29:15
#    - -: Exercise discussion
#    - stop: 01:31:17
#    - start: 01:41:31
#    - 01:42:19: Recording computational steps
#    - 01:49:43: "Exercise: Snakemake"
#    - stop: 02:00:32
#    - start: 02:31:19
#    - -: "Q&A and summary about the exercise"
#    - 02:35:30: Recording environments (containers)
#    - 02:37:41: Sharing code and data
#    - 02:39:55: Demonstration of Zenodo
#    - stop: 02:49:58
#
#- output: day4-social-coding.mkv
#  title: 4.2 Social coding
#  description: >
#    We don't just program for ourselves: we are part of a community.
#    As scientists, we want to get citations, so how can our software
#    support this?  Our work is a constant balance between using the
#    work of others and hoping that others will use our work.  In this
#    lesson, we talk about the advantages and disadvantages of others
#    building on our work, and how to support that.
#
#    We cover best practices for software/data projects, requirements
#    for sharing, copyright, licensing, citation, and more.
#
#    https://coderefinery.github.io/social-coding/
#  time:
#    - start: 02:49:58
#    - -: Initial questions
#    - 03:00:52: Licensing
#    - stop: 03:17:26
#    - start: 03:27:23
#    - -: 'Licensing Q&A'
#    - 03:42:00: Software citation
#    - 03:45:48: Feedback of the day
#    - stop: 03:54:14
#
#
####- output: day4-outro.mkv
####  title: 4.3 Day 4 final remarks
####  description: >
####    ...
####  time:
####    - 3:38:30, 3:39:42
####
###
### Day 5
#- input: day5-obs.mkv
#
#- output: day5-intro.mkv
#  title: 5.0 Day 5 introduction
#  description: >
#    The quick introduction to Day 5, including a general discussion
#    about documentation and Jupyter.
#  time:
#    - start: 00:14:41
#    - stop: 00:25:15
#
#
#- output: day5-jupyter.mkv
#  title: 5.1 Jupyter
#  description: >
#    This lesson teachs learners the user interface of JupyterLab, how
#    Jupyter notebooks work, and what some common and powerful usecases
#    are. Our focus is to demonstrate and discuss and guide towards
#    good practices for reproducibility, collaboration, and
#    reusability. The emphasis of this lesson is to demonstrate how to
#    use notebooks in combination with version control and how to share
#    reproducible notebooks via Binder.
#
#    This lesson demonstrates the use of JupyterLab, nbdime,
#    jupyterlab-git, and Binder.
#
#    https://coderefinery.github.io/jupyter/
#  time:
#    - start: 00:25:57
#    #- -: Introduction to topics
#    #- 00:28:28: Introduction to Jupyter
#    #- 00:39:10: "Demo: Starting Jupyter Lab"
#    #- 00:40:57: Continuing with Jupyter lesson
#    #- 00:45:16: Tools for writing, testing and debugging code
#    #- 00:48:40: First Computational Notebook and Exercise
#    - stop: 00:55:01
#    - start: 01:14:42
#    #- -: Back from Exercise, Questions
#    #- 01:11:43: Notebooks and version control
#    #- 01:16:21: "Demo: version control in Jupyter"
#    - stop: 01:36:16
#    - start: 01:46:34
#    - stop: 01:47:55
#    - start: 02:04:10
#    #- -: Sharing notebooks and Binder exercise
#    #- end: 01:48:46
#    #- start: 02:09:04
#    #- -: Summary
#    - stop: 02:07:35
#
#- output: day5-documentation.mkv
#  title: 5.2 Documentation
#  description: >
#    In this lesson we discuss different solutions for implementing and
#    deploying code documentation. We start by creating a wishlist for
#    how we would code documentation like to be. Then after a tour of
#    available tools, we discuss how to write useful and accessible
#    READMEs, and then we progress by demonstrating and practicing the
#    Sphinx documentation generator and demonstrate how to deploy
#    documentation to Read the Docs service.
#
#    Topics and tools discussed: Markdown, reStructured text, README
#    documentation, table of contents generation, Sphinx, Read the
#    Docs, GitHub/GitLab pages.
#
#    https://coderefinery.github.io/documentation/
#  time:
#    - start: 02:07:35
#    - -: Intro
#    - 02:10:08: § Motivation and wishlist
#    - stop: 02:19:50
#    - start: 02:29:05
#    #- 02:17:01: Documentation examples
#    #- 02:21:19: "Brainstorm: What do we want in a good documentation?"
#    #- end: 02:25:09
#    #- start: 02:36:00
#    #- 02:36:08: Popular tools and solutions
#    - 02:32:19: § README files
#    - 02:33:47: "Exercise: Readme files"
#    - stop: 02:35:41
#    - start: 02:50:08
#    - -: Post-exercise discussion
#    - 02:51:10: Sphinx and Markdown intro
#    - 02:53:30: Sphinx Typealong starts
#    - 03:02:08: "Exercise: more Sphinx things"
#    - stop: 03:03:27
#    - start: 03:24:36
#    - -: Post-exercise discussion
#    - 03:25:56: '§ Deploying Sphinx to GitHub Pages (Demo)'
#    - 03:44:19: Tomorrow, questions, summary, and feedback
#    - end: 03:56:27
#
###- output: day5-outro.mkv
###  title: 5.3 Day 5 outro
###  description: >-
###    Conclusion of day 5 and expectations for day 6.
###  time:
###    - start: 03:45:28
###    - stop: 03:46:23
#
#
#
#- input: day6-obs.mkv
#
#- output: day6-intro.mkv
#  title: 6.0 Day 6 intro
#  description: >
#    The quick introduction to Day 6.
#  time:
#    - start: 00:11:34
#    - end: 00:22:14
#
#
#
#- output: day6-testing.mkv
#  title: 6.1 Software Testing
#  description: >
#    Software testing is a fundamental part of modern software
#    development, and especially important for science since results
#    should be correct.  Luckily, it's not so hard to get started, and
#    anyone can do it. This is a crash course for scientists to get
#    started testing their software.
#
#    Tools covered include concepts of testing for science, unit
#    testing, pytest, continuous integration, and GitHub actions.  We
#    make demos in Python, but have examples in other languages and
#    this will apply to every language in some form.
#
#    https://coderefinery.github.io/testing/
#
#  editlist:
#    - start: 00:22:14
#    - 00:24:51: § Motivation
#    - 00:42:45: § Concepts
#    - 00:51:00: § Testing locally (with exercise)
#
#    #- : "Exercise: testing locally with pytest"
#    - stop: 00:55:31
#    - start: 01:11:06
#    - -: "Q&A"
#    - stop: 01:12:02
#    - start: 01:22:09
#
#    - 01:24:06: Automated testing and continuous integration with Github Actions
#    - stop: 01:37:31
#    - start: 01:57:18
#
#    - 02:00:44: "Test design and final Q&A"
#    - 02:09:03: Conclusions and recommendations
#    - stop: 02:12:28
#
#
#- output: day6-modular-code-development.mkv
#  title: 6.2 Modular Code Development
#  description: >
#    In this live-coding demo session we take a Python script as
#    starting point which reads data, computes simple statistics, and
#    generates a plot. Together we then improve this code based on
#    suggestions from the audience to arrive at a more reusable code
#    with reusable components. We start in the Jupyter notebook, later
#    move to a Python script/module, introduce testing, and finally
#    introduce and motivate a command line interface to our code.
#
#    In this demonstration we use JupyterLab, Python, Pandas,
#    Matplotlib, pytest, and Click.  It is also a great demonstration
#    of pair programming.
#
#    https://coderefinery.github.io/modular-type-along/
#  time:
#    - start: 02:22:22
#    - 02:24:23: Starting questions discussion
#
#    #- 02:22:42: Learning outcomes
#    - 02:29:10: "Demo begins: introduction to our task"
#    - 02:30:12: Starting in a Jupyter notebook
#    #- 02:35:21: Downloading the data
#    #- 02:36:59: More Jupyter now that we have the data
#    - 02:33:48: Running multiple times with a loop
#    - 02:36:18: Splitting up into smaller functions
#
#    #- -: "Summary so far and Q&A on pure functions and many small functions"
#    - 02:50:33: Separate module for reading data
#    - 02:57:34: Gitignore stuff
#    - 02:59:47: Splitting to different cells
#    - stop: 03:06:46
#    - start: 03:16:46
#    - -: requirement.txt for dependencies
#    - 03:18:46: Adding tests
#    - 03:34:16: command line interface
#    - stop: 03:42:55
#
#
#- output: day6-outro.mkv
#  title: 6.3 Workshop outro
#  description: >
#      The concluding remarks of the workshop.
#
#      Outro presentation (will be updated in the future):
#      https://github.com/coderefinery/workshop-outro/blob/master/README.md
#
#  time:
#    - start: 03:42:55
#    - -: Concluding remarks and where to go.
#
#    - 03:50:36: Final feedback and musings on the course, where to go next.
#    - stop: 03:58:37
